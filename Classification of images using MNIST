{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "## Deep Learning(CSE4006)\n",
        "## Lab3\n",
        "####   Name : Patri Lalithya Manasa\n",
        "#### Reg no: 19BCD7013\n",
        "#### Lab slot : L27+L28\n"
      ],
      "metadata": {
        "id": "Dn-0YkbFnb7N"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Design & implement a simple deep learning network for classification of images use MNIST dataset.\n"
      ],
      "metadata": {
        "id": "ONmyHuhRnf_G"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9daDHx3YjLPO"
      },
      "outputs": [],
      "source": [
        "# baseline cnn model for mnist\n",
        "from numpy import mean\n",
        "from numpy import std\n",
        "from matplotlib import pyplot as plt\n",
        "from sklearn.model_selection import KFold\n",
        "from tensorflow.keras.datasets import mnist\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Conv2D\n",
        "from tensorflow.keras.layers import MaxPooling2D\n",
        "from tensorflow.keras.layers import Dense\n",
        "from tensorflow.keras.layers import Flatten\n",
        "from tensorflow.keras.optimizers import SGD"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gWZQ8_vujUFn"
      },
      "outputs": [],
      "source": [
        "# load train and test dataset\n",
        "def load_dataset():\n",
        "\t# load dataset\n",
        "\t(trainX, trainY), (testX, testY) = mnist.load_data()\n",
        "\t# reshape dataset to have a single channel\n",
        "\ttrainX = trainX.reshape((trainX.shape[0], 28, 28, 1))\n",
        "\ttestX = testX.reshape((testX.shape[0], 28, 28, 1))\n",
        "\t# one hot encode target values\n",
        "\ttrainY = to_categorical(trainY)\n",
        "\ttestY = to_categorical(testY)\n",
        "\treturn trainX, trainY, testX, testY"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vVlV63Htjaee"
      },
      "outputs": [],
      "source": [
        "# scale pixels\n",
        "def prep_pixels(train, test):\n",
        "\t# convert from integers to floats\n",
        "\ttrain_norm = train.astype('float32')\n",
        "\ttest_norm = test.astype('float32')\n",
        "\t# normalize to range 0-1\n",
        "\ttrain_norm = train_norm / 255.0\n",
        "\ttest_norm = test_norm / 255.0\n",
        "\t# return normalized images\n",
        "\treturn train_norm, test_norm"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "a4JPKMSHje7o"
      },
      "outputs": [],
      "source": [
        "# define cnn model\n",
        "def define_model():\n",
        "\tmodel = Sequential()\n",
        "\tmodel.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', input_shape=(28, 28, 1)))\n",
        "\tmodel.add(MaxPooling2D((2, 2)))\n",
        "\tmodel.add(Flatten())\n",
        "\tmodel.add(Dense(100, activation='relu', kernel_initializer='he_uniform'))\n",
        "\tmodel.add(Dense(10, activation='softmax'))\n",
        "\t# compile model\n",
        "\topt = SGD(learning_rate=0.01, momentum=0.9)\n",
        "\tmodel.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "\treturn model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "D7TvYNU4jihi"
      },
      "outputs": [],
      "source": [
        "# evaluate a model using k-fold cross-validation\n",
        "def evaluate_model(dataX, dataY, n_folds=5):\n",
        "\tscores, histories = list(), list()\n",
        "\t# prepare cross validation\n",
        "\tkfold = KFold(n_folds, shuffle=True, random_state=1)\n",
        "\t# enumerate splits\n",
        "\tfor train_ix, test_ix in kfold.split(dataX):\n",
        "\t\t# define model\n",
        "\t\tmodel = define_model()\n",
        "\t\t# select rows for train and test\n",
        "\t\ttrainX, trainY, testX, testY = dataX[train_ix], dataY[train_ix], dataX[test_ix], dataY[test_ix]\n",
        "\t\t# fit model\n",
        "\t\thistory = model.fit(trainX, trainY, epochs=10, batch_size=32, validation_data=(testX, testY), verbose=0)\n",
        "\t\t# evaluate model\n",
        "\t\t_, acc = model.evaluate(testX, testY, verbose=0)\n",
        "\t\tprint('> %.3f' % (acc * 100.0))\n",
        "\t\t# stores scores\n",
        "\t\tscores.append(acc)\n",
        "\t\thistories.append(history)\n",
        "\treturn scores, histories"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GG7aiBXHjmC3"
      },
      "outputs": [],
      "source": [
        "# plot diagnostic learning curves\n",
        "def summarize_diagnostics(histories):\n",
        "\tfor i in range(len(histories)):\n",
        "\t\t# plot loss\n",
        "\t\tplt.subplot(2, 1, 1)\n",
        "\t\tplt.title('Cross Entropy Loss')\n",
        "\t\tplt.plot(histories[i].history['loss'], color='blue', label='train')\n",
        "\t\tplt.plot(histories[i].history['val_loss'], color='orange', label='test')\n",
        "\t\t# plot accuracy\n",
        "\t\tplt.subplot(2, 1, 2)\n",
        "\t\tplt.title('Classification Accuracy')\n",
        "\t\tplt.plot(histories[i].history['accuracy'], color='blue', label='train')\n",
        "\t\tplt.plot(histories[i].history['val_accuracy'], color='orange', label='test')\n",
        "\tplt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GoeTjtNVjnqh"
      },
      "outputs": [],
      "source": [
        "# summarize model performance\n",
        "def summarize_performance(scores):\n",
        "\t# print summary\n",
        "\tprint('Accuracy: mean=%.3f std=%.3f, n=%d' % (mean(scores)*100, std(scores)*100, len(scores)))\n",
        "\t# box and whisker plots of results\n",
        "\tplt.boxplot(scores)\n",
        "\tplt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rdD1eanCjssy"
      },
      "outputs": [],
      "source": [
        "# run the test harness for evaluating a model\n",
        "def run_test_harness():\n",
        "\t# load dataset\n",
        "\ttrainX, trainY, testX, testY = load_dataset()\n",
        "\t# prepare pixel data\n",
        "\ttrainX, testX = prep_pixels(trainX, testX)\n",
        "\t# evaluate model\n",
        "\tscores, histories = evaluate_model(trainX, trainY)\n",
        "\t# learning curves\n",
        "\tsummarize_diagnostics(histories)\n",
        "\t# summarize estimated performance\n",
        "\tsummarize_performance(scores)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "cDVW7fD_jvaT",
        "outputId": "143e6c62-5db1-412c-e34a-5e8a089d661b"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
            "11493376/11490434 [==============================] - 0s 0us/step\n",
            "11501568/11490434 [==============================] - 0s 0us/step\n",
            "> 98.525\n",
            "> 98.650\n",
            "> 98.675\n",
            "> 98.900\n",
            "> 98.800\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.\n",
            "  \"\"\"\n",
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:10: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.\n",
            "  # Remove the CWD from sys.path while we load stuff.\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy: mean=98.710 std=0.129, n=5\n"
          ]
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "\n",
        "# entry point, run the test harness\n",
        "run_test_harness()"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "name": "19BCD7013_LAB3.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}